## This file is used to set up the Boundary host catalog and host sets 
## using a GCP Service Account

## The following code is commented out to prevent the provisioning of 
## the Boundary resources before the credentials and other GCP resources 
## have been provisioned.

provider "boundary" {
  addr                   = var.boundary_addr
  auth_method_login_name = var.boundary_login_name
  auth_method_password   = var.boundary_login_password
}

variable "boundary_addr" {
  type = string
}

variable "boundary_login_name" {
  type = string
}

variable "boundary_login_password" {
  type = string
}

resource "boundary_scope" "gcp_test_org" {
  name                     = "GCP Infrastructure"
  description              = "Test org for GCP resources"
  scope_id                 = "global"
  auto_create_admin_role   = true
  auto_create_default_role = true
}

resource "boundary_scope" "gcp_project" {
  name                   = "GCP hosts"
  description            = "Test project for GCP host catalogs"
  scope_id               = boundary_scope.gcp_test_org.id
  auto_create_admin_role = true
}

## GCP service account
## Uncomment the following to set up a host catalog using a service account
## These resources rely on the service account resources created in the service-account.tf file.

# resource "boundary_host_catalog_plugin" "gcp_host_catalog" {
#   name        = "GCP Catalog"
#   description = "GCP Host Catalog"
#   scope_id    = boundary_scope.gcp_project.id
#   plugin_name = "gcp"

#   # recommended to pass in GCP secrets using a file() or using environment variables
#   attributes_json = jsonencode({
#     "zone"         = var.gcp_zone,
#     "project_id"   = var.gcp_project_id,
#     "client_email" = google_service_account.boundary_service_account.email,
#     "disable_credential_rotation" = true
#   })

#   secrets_json = jsonencode({
#     "private_key_id" = google_service_account.boundary_service_account.id,
#     "private_key"    = jsondecode(base64decode(google_service_account_key.boundary_service_account_key.private_key)).private_key
#   })
# }

# output "gcp_host_catalog_id" {
#   value = boundary_host_catalog_plugin.gcp_host_catalog.id
# }

# resource "boundary_host_set_plugin" "database_host_set" {
#   name             = "Database Host Set"
#   description      = "GCP database host set"
#   host_catalog_id  = boundary_host_catalog_plugin.gcp_host_catalog.id
#   attributes_json  = jsonencode({
#     "filters" = ["labels.service-type:database"]
#   })
# }

# output "database_host_set_id" {
#   value = boundary_host_set_plugin.database_host_set.id
# }

# resource "boundary_host_set_plugin" "dev_host_set" {
#   name             = "Dev Host Set"
#   description      = "GCP dev host set"
#   host_catalog_id  = boundary_host_catalog_plugin.gcp_host_catalog.id
#   attributes_json  = jsonencode({
#     "filters" = ["labels.application:dev"]
#   })
# }

# output "dev_host_set_id" {
#   value = boundary_host_set_plugin.dev_host_set.id
# }

# resource "boundary_host_set_plugin" "production_host_set" {
#   name             = "Production Host Set"
#   description      = "GCP Production host set"
#   host_catalog_id  = boundary_host_catalog_plugin.gcp_host_catalog.id
#   attributes_json  = jsonencode({
#     "filters" = ["labels.application:production"]
#   })
# }

# output "production_host_set_id" {
#   value = boundary_host_set_plugin.production_host_set.id
# }